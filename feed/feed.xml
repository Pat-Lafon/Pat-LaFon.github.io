<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Patrick LaFontaine&#39;s Blog</title>
  <subtitle>Precipitously Produced; Powered by Prolonged Procrastination</subtitle>
  <link href="https://pat-lafon.github.io/feed/feed.xml" rel="self" />
  <link href="https://pat-lafon.github.io/" />
  <updated>2025-04-25T00:00:00Z</updated>
  <id>https://pat-lafon.github.io/</id>
  <author>
    <name>Patrick LaFontaine</name>
  </author>
  <entry>
    <title>How are interpreted recursive functions implemented in SMT solvers?</title>
    <link href="https://pat-lafon.github.io/blog/How_are_smt_rec_funs_implemented/" />
    <updated>2025-04-25T00:00:00Z</updated>
    <id>https://pat-lafon.github.io/blog/How_are_smt_rec_funs_implemented/</id>
    <content type="html">&lt;p&gt;Having largely used and heard about logics with respect to uninterpreted
function symbols, I was surprised to learn that Smtlib (and therefore the main solvers
like Z3 and CVC5) support adding interpretations to function symbols. Even
recursive ones!&lt;/p&gt;
&lt;p&gt;It&#39;s kinda hard to find resources on this, and Claude was giving me a bunch of
fake/misleading references but the best source I&#39;ve found is
&lt;a href=&quot;https://github.com/Z3Prover/z3/blob/792ffeeda7195325ce19dff98aaa63a42d7fd739/doc/design_recfuns.md&quot;&gt;https://github.com/Z3Prover/z3/blob/792ffeeda7195325ce19dff98aaa63a42d7fd739/doc/design_recfuns.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also found Section 2.2 of &lt;a href=&quot;https://dl.acm.org/doi/10.1145/3158141&quot;&gt;Refinement
Reflection&lt;/a&gt; very interesting.&lt;/p&gt;
&lt;p&gt;I still don&#39;t fully understand this space, but a key part seems to be how do you
guard/limit the unrolling of the definition on symbolic values?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Submitting a Paper to Arxiv with Minted (2025)</title>
    <link href="https://pat-lafon.github.io/blog/2025_Version_of_submit_minted_package_to_arxiv/" />
    <updated>2025-04-14T00:00:00Z</updated>
    <id>https://pat-lafon.github.io/blog/2025_Version_of_submit_minted_package_to_arxiv/</id>
    <content type="html">&lt;h1 id=&quot;minted-arxiv&quot;&gt;Minted/Arxiv&lt;/h1&gt;
&lt;p&gt;Latex and submitting to Arxiv can cause psycological damage.&lt;/p&gt;
&lt;p&gt;Here is what I did:&lt;/p&gt;
&lt;p&gt;Do the steps in https://tex.stackexchange.com/questions/732716/end-of-2024-version-of-how-to-submit-tex-minted-package-to-arxiv&lt;/p&gt;
&lt;p&gt;Then
https://tex.stackexchange.com/questions/519573/arxiv-undefined-references-and-citations-unable-to-convert-to-pdf
(though I&#39;m not sure if this is required)&lt;/p&gt;
&lt;p&gt;Use https://github.com/google-research/arxiv-latex-cleaner and modify a version
of the following script(replace &lt;code&gt;Cobb&lt;/code&gt; with the foldername of your paper)&lt;/p&gt;
&lt;p&gt;(possible clean up files if doing this repeatedly &lt;code&gt;rm -r Cobb_arXiv* &amp;amp;&amp;amp;&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;arxiv_latex_cleaner Cobb &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; Cobb/minted-cache Cobb_arXiv/minted-cache &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; Cobb/build/main.bbl Cobb_arXiv/ &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; Cobb_arXiv.zip Cobb_arXiv/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you need to specify to minted that you want to use a cache and what
directory it will put it in(depends on the version which is annoying. Many posts
online are for Minted v2.0, but Minted v3.0 does things differently)&lt;/p&gt;
&lt;p&gt;Something like:&lt;/p&gt;
&lt;pre class=&quot;language-tex&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-tex&quot;&gt;&lt;span class=&quot;token function selector&quot;&gt;&#92;usepackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cachedir=minted-cache&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;minted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to build locally and then&lt;/p&gt;
&lt;pre class=&quot;language-tex&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-tex&quot;&gt;&lt;span class=&quot;token function selector&quot;&gt;&#92;usepackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;frozencache=true,cachedir=minted-cache&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;minted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when submitting to Arxiv.&lt;/p&gt;
</content>
  </entry>
</feed>